# action.yml
name: 'Dirty Waters Analysis'
description: 'Analyze software supply chain issues in your dependencies'
branding:
  icon: 'shield'
  color: 'blue'

inputs:
  github_token:
    description: "GitHub token"
    required: true
  dirty_waters_version:
    description: 'Dirty Waters version to use, defaults to latest'
    required: false
    default: 'HEAD'
  project_repo:
    description: 'Project repository path (as in GitHub)'
    required: true
  version_old:
    description: 'Release version to analyze - old if differential analysis'
    required: false
    default: 'HEAD'
  version_new:
    description: 'New release version for differential analysis'
    required: false
    default: 'HEAD^'
  differential_analysis:
    description: 'Whether to perform differential analysis'
    required: false
    default: 'false'
  package_manager:
    description: 'Package manager used in the project'
    required: true
  name_match:
    description: 'Compare the package names with the name in the in the package.json file. This option will slow down the execution time due to the API rate limit of code search'
    required: false
    default: 'false'
  pnpm_scope:
    description: 'Extract dependencies from pnpm with a specific scope'
    required: false
  specified_smells:
    description: 'List of specified smells to analyze. Provide it as a space-separated list of smells (e.g., "--check-source-code --check-forks")'
    required: false
  debug:
    description: 'Enable debug mode'
    required: false
    default: 'false'
  no_gradual_report:
    description: 'Disable gradual report functionality'
    required: false
    default: 'false'
  fail_on_high_severity:
    description: 'Break CI if high severity issues are found'
    required: false
    default: 'true'
  x_to_fail:
    description: 'Percentage threshold for the number of non-high severity issues to fail the CI'
    required: false
    default: '5'
  allow_pr_comment:
    description: 'Post analysis results as a PR comment if high severity issues are found'
    required: false
    default: 'true'
  comment_on_commit:
    description: 'Post analysis results as a commit comment if high severity issues are found'
    required: false
    default: 'false'
  latest_commit_sha:
    description: 'Latest commit SHA from the project using this action, using for commenting on commits'
    required: true
  github_event_before:
    description: 'GitHub event before SHA, to retrieve the previous cache key'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install system dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y git=1:2.34.1-1ubuntu1.9 curl=7.81.0-1ubuntu1.10 jq=1.6-2.1ubuntu3 maven=3.6.3-5 nodejs=12.22.9~dfsg-1ubuntu3 npm=8.5.1+ds-2
        npm install -g pnpm@8.6.0
        npm install -g yarn@1.22.19

    - name: Restore cache
      uses: actions/cache/restore@v4
      id: restore-cache
      with:
        path: tool/cache
        key: dirty-waters-cache-${{ runner.os }}-${{ inputs.project_repo }}-${{ inputs.github_event_before }}
        restore-keys: |
          dirty-waters-cache-${{ runner.os }}-${{ inputs.project_repo }}-

    - name: Create cache directory
      if: steps.restore-cache.outputs.cache-hit != 'true'
      shell: bash
      run: mkdir -p tool/cache

    - name: Clone and setup Dirty Waters
      shell: bash
      run: |
        git clone https://github.com/chains-project/dirty-waters.git
        cd dirty-waters
        if [ "${{ inputs.dirty_waters_version }}" != "HEAD" ]; then
          git checkout ${{ inputs.dirty_waters_version }}
        fi
        pip install -r requirements.txt

    - name: Run analysis
      id: analysis
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GITHUB_API_TOKEN: ${{ inputs.github_token }}
      run: |
        cd dirty-waters/tool
        
        # Copy cache if it exists
        if [ -d "$GITHUB_WORKSPACE/tool/cache" ]; then
          cp -r $GITHUB_WORKSPACE/tool/cache/ .
        fi
        
        # Build command
        CMD="python main.py -p ${{ inputs.project_repo }} -v ${{ inputs.version_old }} -s -pm ${{ inputs.package_manager }}"
        
        if [ "${{ inputs.differential_analysis }}" == "true" ]; then
            CMD="$CMD -vn ${{ inputs.version_new }} -d"
        fi
        
        if [ -n "${{ inputs.name_match }}" ]; then
            CMD="$CMD -n"
        fi
        
        if [ -n "${{ inputs.pnpm_scope }}" ]; then
            CMD="$CMD --pnpm-scope ${{ inputs.pnpm_scope }}"
        fi
        
        if [ -n "${{ inputs.specified_smells }}" ]; then
            CMD="$CMD ${{ inputs.specified_smells }}"
        fi
        
        if [ "${{ inputs.debug }}" == "true" ]; then
            CMD="$CMD --debug"
        fi
        
        if [ "${{ inputs.no_gradual_report }}" == "true" ]; then
            CMD="$CMD --no-gradual-report"
        fi
        
        echo "Running command: $CMD"
        eval $CMD
        
        # Copy cache back
        cp -r cache/ "$GITHUB_WORKSPACE/tool/"
        
        # Process results
        if [ ! -d "results" ]; then
            echo "An error occurred: no reports were generated"
            exit 1
        fi
        
        if [ "${{ inputs.differential_analysis }}" == "true" ]; then
            latest_report=$(ls -t results/*/*_diff_summary.md | head -n1)
        else
            latest_report=$(ls -t results/*/*_static_summary.md | head -n1)
        fi
        
        COMMENT=$(cat "$latest_report")
        
        # Handle PR comments
        PR_NUMBER=$(jq -r ".pull_request.number" "$GITHUB_EVENT_PATH")
        if [[ "$PR_NUMBER" != "null" && "${{ inputs.allow_pr_comment }}" == "true" ]]; then
            curl -s -X POST \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/${{ inputs.project_repo }}/issues/$PR_NUMBER/comments" \
                -d "$(jq -n --arg body "$COMMENT" '{body: $body}')"
        elif [ "${{ inputs.comment_on_commit }}" == "true" ]; then
            if [[ $(cat "$latest_report" | grep -o "(⚠️⚠️⚠️) [0-9]*" | grep -o "[0-9]*" | sort -nr | head -n1) -gt 0 ]]; then
                curl -s -X POST \
                    -H "Accept: application/vnd.github.v3+json" \
                    -H "Authorization: token $GITHUB_TOKEN" \
                    "https://api.github.com/repos/${{ inputs.project_repo }}/commits/${{ inputs.latest_commit_sha }}/comments" \
                    -d "$(jq -n --arg body "$COMMENT" '{body: $body}')"
            fi
        fi
        
        # Copy results
        cp -r results/* "$GITHUB_WORKSPACE/"
        
        # Check for high severity issues
        if [ "${{ inputs.fail_on_high_severity }}" == "true" ]; then
            if [[ $(cat "$latest_report" | grep -o "(⚠️⚠️⚠️) [0-9]*" | grep -o "[0-9]*" | sort -nr | head -n1) -gt 0 ]]; then
                echo "High severity issues found. Failing the build"
                exit 1
            fi
        fi
        
        total_packages=$(cat "$latest_report" | grep -o "Total packages in the supply chain: [0-9]*" | grep -o "[0-9]*")
        for severity in "⚠️⚠️" "⚠️"; do
            for count in $(cat "$latest_report" | grep -o "($severity) [0-9]*" | grep -o "[0-9]*"); do
                if [[ $(echo "scale=2; $count / $total_packages * 100" | bc) -gt ${{ inputs.x_to_fail }} ]]; then
                    echo "Number of $severity issues surpasses the threshold. Failing the build"
                    exit 1
                fi
            done
        done

    - name: Save cache
      uses: actions/cache/save@v4
      if: always()
      with:
        path: tool/cache
        key: dirty-waters-cache-${{ runner.os }}-${{ inputs.project_repo }}-${{ github.sha }}
    
    - name: Break CI if analyses fail
      run: exit $(( steps.analysis.outcome == 'failure' ))
      shell: bash